#version 460 core
#define MAX_DIST 100
#define M_PI 3.14159265358979323846
#define INV4PI 0.07957747154594766788
#define EPS 1e-5
#define MAX_LAYERS 20

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct VoxelData {
    float q[10];
    float bmin[3];
    float bmax[3];
    float sggx[6];
    float albedo[3];
    float sigma;
    float alpha;
};

struct OctreeNode {
    vec3 bmin;
    vec3 bmax;
    int children[8];
    int voxelId; 
};

layout (rgba32f, binding = 0) uniform image2D imgOutput;

layout (std430, binding = 1) readonly buffer ssboVoxel {
    VoxelData voxels[];
};

layout (std430, binding = 2) readonly buffer ssboOctree {
    OctreeNode octreeNodes[];
};

uniform mat4 viewInv;
uniform mat4 projectionInv;
uniform vec3 cameraPos;
uniform vec2 resolution;
uniform int voxelSize;
uniform int octreeLayer;
uniform int currentSample;

struct Ray {
    vec3 o;
    vec3 d;
    int medium;
};

struct IntersectResult {
    vec3 intersection;
    float t;
    int idx;
};

struct SGGX {
    float S_xx, S_xy, S_xz, S_yy, S_yz, S_zz;
};

struct MediumResult {
    SGGX sggx;
    vec3 transmittance;
    vec3 sigma_s;
    vec3 p;
    float pdfSuccess;
    float pdfFailure;
    bool success;
};

struct DirectSamplingResult {
    vec3 Ld;
    vec3 d;
    float pdf;
};

struct Frame {
    vec3 s, t, n;
};

vec3 lightPos = vec3(1.f, 1.f, 1.f);
vec3 lightI = vec3(10.f);
//vec3 ambientL = vec3(.5f, .7f, 1.f);
vec3 ambientL = vec3(0.f);

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rngState) {
  return rngState * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 inclusive.
float stepAndOutputRNGFloat(inout uint rngState) {
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = stepRNG(rngState);
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0f;
}

uint rngState =  800*600*currentSample+600*gl_GlobalInvocationID.x+gl_GlobalInvocationID.y;
//uint rngState = 600*gl_GlobalInvocationID.x+gl_GlobalInvocationID.y;

int loopCnt = 0;
int rayMedium = -1;
bool debug = false;
vec3 debugInfo;

float random() {
    return stepAndOutputRNGFloat(rngState);
}

float sampleExponential(float u, float a) {
    return -log(1.f-u)/a;
}

int sampleEvent(float u, float pAbsorb, float pScatter, float pNull) {
    if (u < pAbsorb) return 0;
    if (u < pAbsorb+pScatter) return 1;
    return 2;
}

vec3 sampleVNDF(const vec3 wi, SGGX sggx, float u1, float u2) {
    // generate sample (u, v, w)
    const float r = sqrt(u1);
    const float phi = 2.0f*M_PI*u2;
    const float u = r*cos(phi);
    const float v= r*sin(phi);
    const float w = sqrt(1.0f-u*u-v*v);
    // build orthonormal basis
    vec3 wk, wj;
    if(wi.z < -0.9999999f) {
        wk = vec3 (0.0f, -1.0f, 0.0f);
        wj = vec3 (-1.0f, 0.0f, 0.0f);
    } else {
        float a = 1.0f/(1.0f+wi.z);
        float b = -wi.x*wi.y*a;
        wk = vec3(1.0f-wi.x*wi.x*a, b, -wi.x);
        wj = vec3(b, 1.0f-wi.y*wi.y*a, -wi.y);
    }
    wk = normalize(wk);
    wj = normalize(wj);
    // project S in this basis
    float S_kk = wk.x*wk.x*sggx.S_xx+wk.y*wk.y*sggx.S_yy+wk.z*wk.z*sggx.S_zz+2.0f*(wk.x*wk.y*sggx.S_xy+wk.x*wk.z*sggx.S_xz+wk.y*wk.z*sggx.S_yz);
    float S_jj = wj.x*wj.x*sggx.S_xx+wj.y*wj.y*sggx.S_yy+wj.z*wj.z*sggx.S_zz+2.0f*(wj.x*wj.y*sggx.S_xy+wj.x*wj.z*sggx.S_xz+wj.y*wj.z*sggx.S_yz);
    float S_ii = wi.x*wi.x*sggx.S_xx+wi.y*wi.y*sggx.S_yy+wi.z*wi.z*sggx.S_zz+2.0f*(wi.x*wi.y*sggx.S_xy+wi.x*wi.z*sggx.S_xz+wi.y*wi.z*sggx.S_yz);
    float S_kj = wk.x*wj.x*sggx.S_xx+wk.y*wj.y*sggx.S_yy+wk.z*wj.z*sggx.S_zz
        +(wk.x*wj.y+wk.y*wj.x)*sggx.S_xy+(wk.x*wj.z+wk.z*wj.x)*sggx.S_xz+(wk.y*wj.z+wk.z*wj.y)*sggx.S_yz;
    float S_ki = wk.x*wi.x*sggx.S_xx+wk.y*wi.y*sggx.S_yy+wk.z*wi.z*sggx.S_zz
        +(wk.x*wi.y+wk.y*wi.x)*sggx.S_xy+(wk.x*wi.z+wk.z*wi.x)*sggx.S_xz+(wk.y*wi.z+wk.z*wi.y)*sggx.S_yz;
    float S_ji = wj.x*wi.x*sggx.S_xx+wj.y*wi.y*sggx.S_yy+wj.z*wi.z*sggx.S_zz
        +(wj.x*wi.y+wj.y*wi.x)*sggx.S_xy+(wj.x*wi.z+wj.z*wi.x)*sggx.S_xz+(wj.y*wi.z+wj.z*wi.y)*sggx.S_yz;
    // compute normal
    float sqrtDetSkji = sqrt(abs(S_kk*S_jj*S_ii-S_kj*S_kj*S_ii-S_ki*S_ki*S_jj-S_ji*S_ji*S_kk+2.0f*S_kj*S_ki*S_ji));
    float inv_sqrtS_ii = 1.0f/sqrt(max(S_ii, EPS));
    float tmp = sqrt(max(S_jj*S_ii-S_ji*S_ji, EPS));
    vec3 Mk = vec3(sqrtDetSkji/tmp, 0.0f, 0.0f);
    vec3 Mj = vec3(-inv_sqrtS_ii*(S_ki*S_ji-S_kj*S_ii)/tmp, inv_sqrtS_ii*tmp, 0);
    vec3 Mi = vec3(inv_sqrtS_ii*S_ki, inv_sqrtS_ii*S_ji, inv_sqrtS_ii*S_ii);
    vec3 wm_kji = normalize(u*Mk+v*Mj+w*Mi);

    // rotate back to world basis
    return wm_kji.x*wk+wm_kji.y*wj+wm_kji.z*wi;
}

float average(vec3 v) {
    return (v.x+v.y+v.z)/3.f;
}

float GaussianDistrubtion(float x, float miu, float sigma) {
    //return 1.f/sqrt(2.f*M_PI*sigma*sigma)*exp(-(x-miu)*(x-miu)/(2.f*sigma*sigma));
    return exp(-(x-miu)*(x-miu)/(2.f*sigma*sigma))/sqrt(2.f*M_PI*sigma*sigma);
}

float f(float q[10], vec3 p) {
    return q[0]*p.x*p.x+q[1]*p.y*p.y+q[2]*p.z*p.z+q[3]*p.x*p.y+q[4]*p.x*p.z+q[5]*p.y*p.z+q[6]*p.x+q[7]*p.y+q[8]*p.z+q[9];
}

vec3 df(float q[10], vec3 p) {
    return vec3(
        2*p.x*q[0]+p.y*q[3]+p.z*q[4]+q[6],
        2*p.y*q[1]+p.x*q[3]+p.z*q[5]+q[7],
        2*p.z*q[2]+p.x*q[4]+p.y*q[5]+q[8]
        );
}

float D(vec3 wm, SGGX sggx) {
    float detS = sggx.S_xx*sggx.S_yy*sggx.S_zz-sggx.S_xx*sggx.S_yz*sggx.S_yz-sggx.S_yy*sggx.S_xz*sggx.S_xz-sggx.S_zz*sggx.S_xy*sggx.S_xy+2.0f*sggx.S_xy*sggx.S_xz*sggx.S_yz;
    float den = wm.x*wm.x*(sggx.S_yy*sggx.S_zz-sggx.S_yz*sggx.S_yz)+wm.y*wm.y*(sggx.S_xx*sggx.S_zz-sggx.S_xz*sggx.S_xz)+wm.z*wm.z*(sggx.S_xx*sggx.S_yy-sggx.S_xy*sggx.S_xy)
        +2.0f*(wm.x*wm.y*(sggx.S_xz*sggx.S_yz-sggx.S_zz*sggx.S_xy)+wm.x*wm.z*(sggx.S_xy*sggx.S_yz-sggx.S_yy*sggx.S_xz)+wm.y*wm.z*(sggx.S_xy*sggx.S_xz-sggx.S_xx*sggx.S_yz));
    float D = pow(abs(detS), 1.5f)/(M_PI*den*den);
    return D;
}

float sigmaWi(vec3 wi, SGGX sggx) {
    float sqrSigma = wi.x*wi.x*sggx.S_xx+wi.y*wi.y*sggx.S_yy+wi.z*wi.z*sggx.S_zz+2.0f*(wi.x*wi.y*sggx.S_xy+wi.x*wi.z*sggx.S_xz+wi.y*wi.z*sggx.S_yz);
    return (sqrSigma > 0.f) ? sqrt(sqrSigma) : 0.f;
}

float evalSpecular(SGGX sggx, vec3 wi, vec3 wo) {
    vec3 wh = normalize(wi+wo);
    return 0.25*D(wh, sggx)/sigmaWi(wi, sggx);
}

float evalDiffuse(SGGX sggx, vec3 wi, vec3 wo) {
    // sample VNDF
    vec3 wm = sampleVNDF(wi, sggx, random(), random());
    // eval diffuse
    return 1.0f/M_PI*max(0.0f, dot(wo, wm));
}

float phasePdf(SGGX sggx, vec3 wo, vec3 wi) {
    return evalSpecular(sggx, wo, wi);
    //return evalDiffuse(sggx, wo, wi);
    //return 0.4f*evalSpecular(sggx, wo, wi)+0.6f*evalDiffuse(sggx, wo, wi);
}

float density(float q[10], vec3 p, float sigma, float alpha, float wDotN) {
    //float d = f(q, p)/length(df(q, p));
    return alpha*wDotN*GaussianDistrubtion(f(q, p), 0, sigma);
    //return 1.f;
}

Frame coordinateSystem(vec3 n) {
    vec3 s, t;
    float si = 1.f;
    if (n.z < 0.f)
        si = -1.f;
    float a = -1.f/(si+n.z);
    float b = n.x*n.y*a;
    s = vec3(1.f+si*n.x*n.x*a, si*b, -si*n.x);
    t = vec3(b, si+n.y*n.y*a, -n.y);
    return Frame(s, t, n);
}

vec3 evalTransmittance(Ray r, float tMax) {
    VoxelData voxel = voxels[r.medium];
    float maxDensity = voxel.alpha*GaussianDistrubtion(0, 0, voxel.sigma);
    if (maxDensity == 0) {
        return vec3(1.f);
    }
    SGGX sggx = {voxel.sggx[0], voxel.sggx[1], voxel.sggx[2], voxel.sggx[3], voxel.sggx[4], voxel.sggx[5]};
    int nSamples = 2;
    float result = 0.f;
    for (int i = 0; i < nSamples; ++i) {
        float t = EPS;
        while (true) {
            t += sampleExponential(random(), maxDensity);
            if (t >= tMax) {
                result += 1;
                break;
            }
            vec3 p = r.o+t*r.d;

            vec3 n = normalize(df(voxel.q, p));
            float densityAtT = density(voxel.q, p, voxel.sigma, voxel.alpha, abs(dot(-r.d, n)));

            if (densityAtT/maxDensity > random())
                break;
        }
    }
    return vec3(result/nSamples);
    //return vec3(1.f);
}

MediumResult sampleDistance(Ray r, float tMax) {
    VoxelData voxel = voxels[r.medium];
    MediumResult mRes;
    mRes.sggx = SGGX(voxel.sggx[0], voxel.sggx[1], voxel.sggx[2], voxel.sggx[3], voxel.sggx[4], voxel.sggx[5]);
    mRes.transmittance = vec3(1.f);
    mRes.pdfSuccess = 1.f;
    mRes.pdfFailure = 1.f;
    bool success = false;
    float t = 0.f;
    float maxDensity = voxel.alpha*GaussianDistrubtion(0, 0, voxel.sigma);
    if (maxDensity == 0) {
        mRes.success = false;
        return mRes;
    }
    vec3 albedo = vec3(voxel.albedo[0], voxel.albedo[1], voxel.albedo[2]);
    int i = 0;
    while (true) {
        t += sampleExponential(random(), maxDensity);
        if (t >= tMax)
            break;
        vec3 p = r.o+t*r.d;

        vec3 n = normalize(df(voxel.q, p));
        float densityAtT = density(voxel.q, p, voxel.sigma, voxel.alpha, abs(dot(-r.d, n)));

        if (densityAtT/maxDensity > random()) {
            mRes.p = p;
            mRes.sigma_s = albedo*densityAtT;
            mRes.transmittance = ((densityAtT != 0.f) ? vec3(1.f)/densityAtT : vec3(0.f));
            success = true;
            break;
        }
        i++;
    }
    mRes.success = success && mRes.pdfSuccess > 0;
    return mRes;
}

bool inBox(vec3 p, vec3 bmin, vec3 bmax) {
    return min(p, bmin) == bmin && max(p, bmax) == bmax;
}

float getMinimumQuadraticSolution(Ray r, float a, float b, float c, float tMin, float tMax, vec3 bmin, vec3 bmax) {
    float delta = b*b-4*a*c, t = MAX_DIST;
    if (delta >= 0) {
        float sqrtDelta = sqrt(delta);
        float temp = (-b-sqrtDelta)/(2*a);
        if (tMin < temp && temp < tMax) {
            vec3 p = r.o+temp*r.d;
            if (inBox(p, bmin, bmax)) {
                t = min(t, temp);
            }
        }
        temp = (-b+sqrtDelta)/(2*a);
        if (tMin < temp && temp < tMax) {
            vec3 p = r.o+temp*r.d;
            if (inBox(p, bmin, bmax)) {
                t = min(t, temp);
            }
        }
    }
    return t;
}

float intersectAABB(Ray r, vec3 bmin, vec3 bmax, float tMin, float tMax) {
    vec3 tmin = (bmin-r.o)/r.d;
    vec3 tmax = (bmax-r.o)/r.d;
    vec3 t1 = min(tmin, tmax);
    vec3 t2 = max(tmin, tmax);
    float tEnter = max(max(t1.x, t1.y), t1.z);
    float tExit = min(min(t2.x, t2.y), t2.z);
    if (tEnter < tExit) {
        if (tMin < tEnter && tEnter < tMax) return tEnter;
        if (tMin < tExit && tExit < tMax) return tExit;
    }
    return MAX_DIST;
}

IntersectResult intersectVoxel(Ray r, int idx, float tMin, float tMax, bool inMedium) {
    VoxelData voxel = voxels[idx];
    vec3 bmin = {voxel.bmin[0], voxel.bmin[1], voxel.bmin[2]};
    vec3 bmax = {voxel.bmax[0], voxel.bmax[1], voxel.bmax[2]};

    float a = voxel.q[0]*r.d.x*r.d.x+voxel.q[1]*r.d.y*r.d.y+voxel.q[2]*r.d.z*r.d.z
        +voxel.q[3]*r.d.x*r.d.y+voxel.q[4]*r.d.x*r.d.z+voxel.q[5]*r.d.y*r.d.z;
    float b = 2*voxel.q[0]*r.o.x*r.d.x+2*voxel.q[1]*r.o.y*r.d.y+2*voxel.q[2]*r.o.z*r.d.z
        +voxel.q[3]*(r.o.x*r.d.y+r.o.y*r.d.x)+voxel.q[4]*(r.o.x*r.d.z+r.o.z*r.d.x)+voxel.q[5]*(r.o.y*r.d.z+r.o.z*r.d.y)
        +voxel.q[6]*r.d.x+voxel.q[7]*r.d.y+voxel.q[8]*r.d.z;
    float c = f(voxel.q, r.o);
    //float c = f(voxel.q, r.o);
    // float a = voxel.hullQ[0]*r.d.x*r.d.x+voxel.hullQ[1]*r.d.y*r.d.y+voxel.hullQ[2]*r.d.z*r.d.z
    //     +voxel.hullQ[3]*r.d.x*r.d.y+voxel.hullQ[4]*r.d.x*r.d.z+voxel.hullQ[5]*r.d.y*r.d.z;
    // float b = 2*voxel.hullQ[0]*r.o.x*r.d.x+2*voxel.hullQ[1]*r.o.y*r.d.y+2*voxel.hullQ[2]*r.o.z*r.d.z
    //     +voxel.hullQ[3]*(r.o.x*r.d.y+r.o.y*r.d.x)+voxel.hullQ[4]*(r.o.x*r.d.z+r.o.z*r.d.x)+voxel.hullQ[5]*(r.o.y*r.d.z+r.o.z*r.d.y)
    //     +voxel.hullQ[6]*r.d.x+voxel.hullQ[7]*r.d.y+voxel.hullQ[8]*r.d.z;
    // float c = f(voxel.hullQ, r.o);
    float sigma = voxel.sigma;
    //float sigma = 1e-4f;
    IntersectResult res;
    res.idx = -1;
    if (a == 0) {
        res.t = MAX_DIST;
        return res;
    }
    float upSol = getMinimumQuadraticSolution(r, a, b, c-3.f*sigma, tMin, tMax, bmin, bmax);
    float downSol = getMinimumQuadraticSolution(r, a, b, c+3.f*sigma, tMin, tMax, bmin, bmax);
    float aabb = intersectAABB(r, bmin, bmax, tMin, tMax);
    if (aabb < tMax) {
        float func = f(voxel.q, r.o+aabb*r.d);
        if (func < -3.f*sigma || 3.f*sigma < func) {
            aabb = MAX_DIST;
        }
    }
    res.t = min(min(upSol, downSol), aabb);
    if (inMedium && res.t >= tMax) {
        res.t = tMin;
    }
    if (res.t < tMax) {
        res.intersection = r.o+res.t*r.d;
        res.idx = idx;
    }
    return res;
}

// IntersectResult intersect(Ray r, float tMax) {
//     IntersectResult res;
//     res.t = MAX_DIST;
//     res.idx = -1;
//     //for (int i = 0; i < voxelSize; i++) {
//         int i = 317;
//         IntersectResult intr = intersectVoxel(r, i, EPS, tMax);
//         if (intr.t < res.t) {
//             res = intr;
//         }
//     //}
//     return res;
// }

OctreeNode uStk[MAX_LAYERS];
int iterStk[MAX_LAYERS];
int closestChildIdxStk[MAX_LAYERS];
float planeHitStk[MAX_LAYERS][3];

int closestChildIndex(Ray r, vec3 center) {
    vec3 v = r.o-center;
    int xTest = int(v.x >= 0.f);
    int yTest = int(v.y >= 0.f);
    int zTest = int(v.z >= 0.f);
    return (xTest << 2) | (yTest << 1) | zTest;
}

float intersectOctPlane(Ray r, vec3 n, vec3 bmin, vec3 bmax, float tMin, float tMax) {
    vec3 center = (bmin+bmax)/2.f;
    float t = dot(center-r.o, n)/dot(r.d, n);
    if (tMin < t && t < tMax) {
        return t;
    }
    return MAX_DIST;
}

// IntersectResult intersect(Ray r, float tMax) {
//     int top = 0;
//     IntersectResult res;
//     res.idx = -1;
//     res.t = tMax;
//     uStk[top] = octreeNodes[0];
    
//     closestChildIdxStk[top] = -1;
//     iterStk[top] = -1;

//     float tMin = EPS;
//     int rCnt = 0;
//     while (top >= 0) {
//         if (iterStk[top] == -1) {
//             float aabb = intersectAABB(r, uStk[top].bmin, uStk[top].bmax, tMin, res.t);
//             if (aabb >= res.t){
//                 top--;
//                 continue;
//             }
//         }
//         if (top == octreeLayer) {
//             rCnt++;
//             if (uStk[top].voxelId != 338 && uStk[top].voxelId != 126) {
//                 top--;
//                 continue;
//             }
//             IntersectResult intr = intersectVoxel(r, uStk[top].voxelId, tMin, res.t);
//             if (intr.t < res.t) {
//                 //res = intr;
//                 return intr;
//             }
//             top--;
//         } else {
//             if (iterStk[top] < 4) {
//                 if (iterStk[top] == -1) {
//                     closestChildIdxStk[top] = closestChildIndex(r, (uStk[top].bmin+uStk[top].bmax)/2.f);
//                     planeHitStk[top][0] = intersectOctPlane(r, vec3(0, 0, 1), uStk[top].bmin, uStk[top].bmax, EPS, res.t);
//                     planeHitStk[top][1] = intersectOctPlane(r, vec3(0, 1, 0), uStk[top].bmin, uStk[top].bmax, EPS, res.t);
//                     planeHitStk[top][2] = intersectOctPlane(r, vec3(1, 0, 0), uStk[top].bmin, uStk[top].bmax, EPS, res.t);
//                 } else {
//                     int planeIdx = -1;
//                     float tPlane = MAX_DIST;
//                     for (int i = 0; i < 3; ++i) {
//                         if (planeHitStk[top][i] < tPlane) {
//                             tPlane = planeHitStk[top][i];
//                             planeIdx = i;
//                         }
//                     }
//                     if (planeIdx == -1) {
//                         top--;
//                         continue;
//                     }
//                     closestChildIdxStk[top] ^= 1 << planeIdx;
//                     planeHitStk[top][planeIdx] = MAX_DIST;
//                 }
//                 iterStk[top]++;
//                 int vIdx = uStk[top].children[closestChildIdxStk[top]];
//                 if (vIdx >= 0) {
//                     top++;
//                     uStk[top] = octreeNodes[vIdx];
//                     closestChildIdxStk[top] = -1;
//                     iterStk[top] = -1;
//                 }
//             } else {
//                 top--;
//             }
//         }
//     }
//     //res.t = rCnt;
//     return res;
// }

IntersectResult intersect(Ray r, float tMax) {
    int top = 0;
    IntersectResult res;
    res.idx = -1;
    res.t = tMax;
    uStk[top] = octreeNodes[0];
    iterStk[top] = 0;
    while (top >= 0) {
        if (iterStk[top] == 0) {
            float aabb = intersectAABB(r, uStk[top].bmin, uStk[top].bmax, EPS, res.t);
            if (aabb >= res.t) {
                top--;
                continue;
            }
        }
        if (top == octreeLayer) {
            IntersectResult intr = intersectVoxel(r, uStk[top].voxelId, EPS, res.t, false);
            if (intr.t < res.t) {
                res = intr;
            }
            top--;
        } else {
            if (iterStk[top] < 8) {
                int vIdx = uStk[top].children[iterStk[top]];
                iterStk[top]++;
                if (vIdx >= 0) {
                    top++;
                    uStk[top] = octreeNodes[vIdx];
                    iterStk[top] = 0;
                }
            } else {
                top--;
            }
        }
    }
    return res;
}

vec3 shadeVoxel(IntersectResult intr) {
    VoxelData voxel = voxels[intr.idx];
    vec3 N = normalize(df(voxel.q, intr.intersection));
    vec3 V = cameraPos-intr.intersection;
    if (dot(N, V) < 0) {
        N = -N;
    }
    return N/2.f+.5f;
}

int maxDepth = 1;

float miWeight(float pdfA, float pdfB) {
    pdfA *= pdfA;
    pdfB *= pdfB;
    return pdfA/(pdfA+pdfB);
}

DirectSamplingResult sampleLd(vec3 p, int medium) {
    DirectSamplingResult dRes;
    vec3 wi = lightPos-p;
    float lightDist = length(wi);
    wi = normalize(wi);
    dRes.Ld = lightI/(lightDist*lightDist);
    dRes.pdf = 1.f;
    dRes.d = wi;

    vec3 transmittance = vec3(1.f);
    Ray r = {p, wi, medium};
    IntersectResult iRes;
    while (lightDist > EPS) {
        if (r.medium >= 0) {
            iRes = intersectVoxel(r, r.medium, EPS, MAX_DIST, true);
            if (iRes.t >= MAX_DIST)
               iRes.t = 0.f;
            transmittance *= evalTransmittance(r, min(iRes.t, lightDist));
        } else {
            iRes = intersect(r, MAX_DIST);
        }
        if (iRes.idx == -1) {
            break;
        }
        r.o = iRes.intersection;
        lightDist -= iRes.t;
        if (r.medium != iRes.idx) {
            r.medium = iRes.idx;
        } else {
            r.medium = -1;
        }
    }
    dRes.Ld *= transmittance;
    //dRes.Ld = transmittance;
    return dRes;
}

vec3 Li(Ray r) {
    vec3 L = vec3(0.f), throughput = vec3(1.f);
    int depth = 0;
    MediumResult mRes;
    IntersectResult iRes = intersect(r, MAX_DIST);
    while (depth < maxDepth) {
        bool inMedium = false;
        if (r.medium >= 0) {
            float tMax = iRes.t;
            if (tMax >= MAX_DIST)
                tMax = 0.f;
            // return vec3(r.medium, 1000.f*tMax, 0.f);
            // VoxelData voxel = voxels[r.medium];
            // return vec3(voxel.alpha);
            // return 10000.0f*vec3(voxel.sigma);
            // SGGX sggx = {voxel.sggx[0], voxel.sggx[1], voxel.sggx[2], voxel.sggx[3], voxel.sggx[4], voxel.sggx[5]};
            // vec3 n = normalize(df(voxel.q, r.o));
            // Frame f = coordinateSystem(n);
            // vec3 wi = vec3(dot(-r.d, f.s), dot(-r.d, f.t), dot(-r.d, f.n));
            // return vec3(sigmaWi(wi, sggx));

            mRes = sampleDistance(r, tMax);
            if (mRes.success) {
                inMedium = true;
                throughput *= mRes.sigma_s*mRes.transmittance/mRes.pdfSuccess;
                DirectSamplingResult dRes = sampleLd(mRes.p, r.medium);

                // VoxelData voxel = voxels[r.medium];
                // vec3 n = normalize(df(voxel.q, mRes.p));
                // Frame f = coordinateSystem(n);
                // vec3 wo = vec3(dot(-r.d, f.s), dot(-r.d, f.t), dot(-r.d, f.n));
                // vec3 wi = vec3(dot(dRes.d, f.s), dot(dRes.d, f.t), dot(dRes.d, f.n));
                // float phaseVal = phasePdf(mRes.sggx, wo, wi);

                float phaseVal = phasePdf(mRes.sggx, -r.d, dRes.d);
                // Note that we are only using point light.
                float weight = miWeight(dRes.pdf, 0.f);
                L += throughput*dRes.Ld*phaseVal*weight;
                //L = dRes.Ld;
                // Multiple scattering prohibited
                break;
            }
            //return vec3(1.f, 0.f, 0.f);
        }

        if (!inMedium) {
            if (r.medium >= 0) {
                throughput *= mRes.transmittance/mRes.pdfFailure;
            }
            if (iRes.idx == -1) {
                L += throughput*ambientL;
                break;
            }
            r.o = iRes.intersection;
            if (r.medium != iRes.idx) {
                r.medium = iRes.idx;
            } else {
                r.medium = -1;
            }
            if (r.medium >= 0) {
                iRes = intersectVoxel(r, r.medium, EPS, MAX_DIST, true);
            } else {
                iRes = intersect(r, MAX_DIST);
            }
        }
        loopCnt++;
        rayMedium = r.medium;
    }
    return L;
}

vec3 F(vec3 F0, float VdotH) {
    return mix(F0, vec3(1.f), pow(1.f-VdotH, 5.f));
}

float D(float NdotH, float roughness) {
    float a2 = roughness*roughness;
    float cos2Theta = NdotH*NdotH;
    float tan2Theta = (1.f-cos2Theta)/cos2Theta;
    float d = 1.f+tan2Theta/a2;
    return 1.f/(M_PI*a2*cos2Theta*cos2Theta*d*d);
}

float lambda(float cosTheta, float roughness) {
    float cos2Theta = cosTheta*cosTheta;
    float tan2Theta = (1.f-cos2Theta)/cos2Theta;
    float a2 = roughness*roughness;
    return (sqrt(1.f+a2*tan2Theta)-1.f)/2.f;
}

float G(float NdotL, float NdotV, float roughness) {
    return 1.f/(1.f+lambda(NdotL, roughness)+lambda(NdotV, roughness));
}

vec3 LGGX(Ray r) {
    vec3 L = vec3(0.f);
    float roughness = .31623f;
    IntersectResult iRes = intersect(r, MAX_DIST);
    if (iRes.idx >= 0) {
        VoxelData voxel = voxels[iRes.idx];
        vec3 albedo = vec3(voxel.albedo[0], voxel.albedo[1], voxel.albedo[2]);
        vec3 n = normalize(df(voxel.q, iRes.intersection));
        vec3 wi = lightPos-iRes.intersection;
        float lightDist = length(wi);
        wi = normalize(wi);
        Ray shadowRay;
        shadowRay.o = iRes.intersection;
        shadowRay.d = wi;
        IntersectResult shadowRes = intersect(shadowRay, MAX_DIST);
        if (shadowRes.t < MAX_DIST) {
            vec3 H = normalize(wi-r.d);
            float NdotH = abs(dot(n, H));
            float NdotL = abs(dot(n, wi));
            float NdotV = abs(dot(n, -r.d));
            float VdotH = abs(dot(n, H));
            vec3 fresnel = F(albedo, VdotH);
            vec3 specular = fresnel*D(NdotH, roughness)*G(NdotL, NdotV, roughness)/(4.f*NdotV*NdotL);
            L += specular*NdotL*lightI/(lightDist*lightDist);
        }   
    }
    return L;
}

void main() {
    vec2 imgSize = vec2(imageSize(imgOutput));
    vec2 uv = (gl_GlobalInvocationID.xy+vec2(random(), random()))/imgSize*2.f-1.f;
    vec4 ndcRayDir = vec4(uv, 1.f, 1.f);
    vec4 worldRayDir = viewInv*projectionInv*ndcRayDir;
    Ray r = {cameraPos, worldRayDir.xyz/worldRayDir.w, -1};
    r.d = normalize(r.d);
    // IntersectResult intr = intersect(r);
    // if (intr.t < MAX_DIST) {
    //     hit = true;
    //     color += shadeVoxel(intr)/SAMPLES;
    // }
    // if (!hit)
    //     color = vec3(.5f, .7f, 1);
    vec3 color = imageLoad(imgOutput, ivec2(gl_GlobalInvocationID.xy)).rgb;
    color *= (currentSample-1.f)/currentSample;
    //color = Li(r);
    color += Li(r)/currentSample;
    //color += LGGX(r)/currentSample;
    //color += LiPBRT(r)/currentSample;
    imageStore(imgOutput, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.f));
}